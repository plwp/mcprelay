name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Auto-fix code quality
      run: |
        # Configure git for automated commits
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Run ruff auto-fixes
        ruff check --fix mcprelay/ tests/ || true
        
        # Run black formatting
        black mcprelay/ tests/
        
        # Commit any changes
        git add -A
        if ! git diff --staged --quiet; then
          git commit -m "Auto-fix linting and formatting issues"
          git push
        fi

    # - name: Type check with mypy
    #   run: |
    #     mypy mcprelay/

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=mcprelay --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  docker:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: mcprelay:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm -d --name mcprelay-test -p 8080:8080 mcprelay:test
        sleep 10
        curl -f http://localhost:8080/health || exit 1
        docker stop mcprelay-test

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  validate:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"

    - name: Install MCPRelay
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Validate configuration
      run: |
        mcprelay validate

    - name: Test CLI commands
      run: |
        mcprelay --help
        mcprelay init --output test-config.yaml
        mcprelay validate --config test-config.yaml